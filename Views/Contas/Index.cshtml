@model IEnumerable<Conta>
@{
    ViewData["Title"] = "Controle de Contas";
    var dataFiltro = (DateTime)ViewBag.DataFiltro;
    var balanco = (decimal)ViewBag.Balanco;
}

<h1>Controle de Contas - @dataFiltro.ToString("MMMM/yyyy")</h1>
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<div class="d-flex justify-content-between align-items-center mb-3">

    <div>
        <form asp-action="CriarNovoMes" method="post" class="d-inline">
            @Html.AntiForgeryToken()
            <input type="hidden" name="mes" value="@dataFiltro.Month" />
            <input type="hidden" name="ano" value="@dataFiltro.Year" />
            <button type="submit" class="btn btn-info">Criar Mês Seguinte</button>
        </form>
    </div>

    <div>
        <a asp-action="Criar" class="btn btn-primary">Adicionar Nova Conta</a>
    </div>

</div>

<div class="summary-section">
    <div class="text-end mb-2">
        <button class="btn btn-light btn-sm btn-toggle-summary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseSummarySection" aria-expanded="false" aria-controls="collapseSummarySection" title="Exibir/Ocultar Resumo">
            <i class="bi bi-currency-dollar"></i>
        </button>
    </div>

    <div class="collapse" id="collapseSummarySection">
        <div class="row text-center">
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card p-2">
                    <h5 class="card-title">Proventos</h5>
                    <p class="card-text text-success">@ViewBag.TotalProventos.ToString("C")</p>
                </div>
            </div>
            <div class="col-md-4 mb-3 mb-md-0">
                <div class="card p-2">
                    <h5 class="card-title">Despesas</h5>
                    <p class="card-text text-danger">@ViewBag.TotalDespesas.ToString("C")</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card p-2">
                    <h5 class="card-title">Balanço</h5>
                    <p class="card-text @(balanco >= 0 ? "text-success" : "text-danger")">@balanco.ToString("C")</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="import-section my-4">
    <p>
        <button class="btn btn-outline-primary btn-toggle-import" type="button" data-bs-toggle="collapse" data-bs-target="#collapseImportSection" aria-expanded="false" aria-controls="collapseImportSection">
            Importar via CSV
        </button>
    </p>
    <div class="collapse" id="collapseImportSection">
        <div class="card card-body">
            <div class="row">
                <div class="col-md-6 mb-3 mb-md-0">
                    <h5>Importar Contas</h5>
                    <p class="small text-muted">Faça o upload de um arquivo .csv para adicionar múltiplas contas de uma vez.</p>

                    <form asp-controller="Contas" asp-action="UploadCsv" method="post" enctype="multipart/form-data">
                        <div class="input-group">
                            <input type="file" name="csvFile" class="form-control" id="csvFile" accept=".csv" />
                            <button type="submit" class="btn btn-success">Importar</button>
                        </div>
                    </form>
                </div>
                <div class="col-md-6">
                    <h5>Template</h5>
                    <p class="small text-muted">Não sabe o formato? Baixe nosso template com dados de exemplo.</p>
                    <a asp-controller="Contas" asp-action="DownloadTemplate" class="btn btn-outline-secondary">Download do Template</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="table-responsive">
<table class="table table-striped table-hover">
        <thead>
            <tr>
                <th class="sortable" data-type="text">Nome</th>
                <th class="sortable" data-type="currency">Valor</th>
                <th class="sortable" data-type="date">Vencimento</th>
                <th class="sortable" data-type="text">Status</th>
                <th>Observação</th>
                <th>Ações</th>
            </tr>
        </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr class="@(item.Status == StatusConta.Pago ? "table-success" : "")">
                <td>@Html.DisplayFor(modelItem => item.Nome)</td>
                <td class="@(item.Tipo == TipoConta.Provento ? "text-success" : "text-danger")">@Html.DisplayFor(modelItem => item.Valor)</td>
                <td>@item.DataVencimento.ToString("dd/MM/yyyy")</td>
                <td>@Html.DisplayFor(modelItem => item.Status)</td>
                <td>@Html.DisplayFor(modelItem => item.Observacao)</td>
                <td>
                    <a asp-action="Editar" asp-route-id="@item.Id" class="btn btn-sm btn-warning">Editar</a>
                    <form asp-action="Deletar" asp-route-id="@item.Id" method="post" class="d-inline" onsubmit="return confirm('Tem certeza?');">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-danger">Excluir</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>
</div>
<div class="d-flex justify-content-between mt-4">

    <div>
        <a class="btn btn-secondary" href="@Url.Action("Index", new { mes = dataFiltro.AddMonths(-1).Month, ano = dataFiltro.AddMonths(-1).Year })">‹ Mês Anterior</a>
    </div>

    <div>
        <a class="btn btn-secondary" href="@Url.Action("Index", new { mes = dataFiltro.AddMonths(1).Month, ano = dataFiltro.AddMonths(1).Year })">Próximo Mês ›</a>
    </div>

</div>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.querySelector('.table');
            if (!table) return;

            const headers = table.querySelectorAll('th.sortable');
            const tbody = table.querySelector('tbody');

            headers.forEach((header, index) => {
                header.addEventListener('click', () => {
                    // Limpa a ordenação de outras colunas
                    headers.forEach(h => {
                        if (h !== header) {
                            h.classList.remove('sort-asc', 'sort-desc');
                        }
                    });

                    const sortDirection = header.classList.contains('sort-asc') ? 'desc' : 'asc';

                    if (sortDirection === 'desc') {
                        header.classList.remove('sort-asc');
                        header.classList.add('sort-desc');
                    } else {
                        header.classList.remove('sort-desc');
                        header.classList.add('sort-asc');
                    }

                    // A mágica da ordenação acontece aqui
                    sortTable(index, sortDirection, header.dataset.type);
                });
            });

            const sortTable = (columnIndex, direction, type) => {
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const directionModifier = direction === 'asc' ? 1 : -1;

                const sortedRows = rows.sort((a, b) => {
                    const aText = a.children[columnIndex].innerText.trim();
                    const bText = b.children[columnIndex].innerText.trim();

                    switch (type) {
                        case 'date':
                            // Converte a data de dd/MM/yyyy para um formato comparável
                            const [dayA, monthA, yearA] = aText.split('/');
                            const dateA = new Date(`${yearA}-${monthA}-${dayA}`);
                            const [dayB, monthB, yearB] = bText.split('/');
                            const dateB = new Date(`${yearB}-${monthB}-${dayB}`);
                            return (dateA - dateB) * directionModifier;
                        case 'currency':
                            // Converte R$ 1.250,50 para 1250.50
                            const numA = parseFloat(aText.replace('R$', '').replace(/\./g, '').replace(',', '.').trim());
                            const numB = parseFloat(bText.replace('R$', '').replace(/\./g, '').replace(',', '.').trim());
                            return (numA - numB) * directionModifier;
                        case 'text':
                        default:
                            return aText.localeCompare(bText) * directionModifier;
                    }
                });

                // Re-adiciona as linhas ordenadas na tabela
                while (tbody.firstChild) {
                    tbody.removeChild(tbody.firstChild);
                }
                tbody.append(...sortedRows);
            };
        });
    </script>
}